.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Grades 3"
.TH Grades 3 "2009-06-14" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Grades \- A collocation of homework, classwork and exams
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Grades;
\&
\&        my $script = Grades::Script\->new_with_options( league => getcwd );
\&        my $league = League\->new( id => $script\->league );
\&        my $grades = Grades\->new( league => $league );
\&
\&        my $homeworkgrades = $grades\->homework;
\&        my $classworkgrades = $grades\->classwork;
\&        my $examgrades = $grades\->examGrade;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An alternative to a spreadsheet for grading students, using \s-1YAML\s0 files and 
scripts. The students are the players in a league ( class.) See the \s-1README\s0 and example emile league in t/emile in the distribution for the layout of the league directory in which homework, classwork and exam scores are recorded.
.PP
Keywords: gold stars, token economies, bean counter
.SH "ATTRIBUTES & METHODS"
.IX Header "ATTRIBUTES & METHODS"
.Sh "\s-1LEAGUE\s0 \s-1CLASS\s0"
.IX Subsection "LEAGUE CLASS"
\fIid\fR
.IX Subsection "id"
.PP
Unless called from the script or web app, it's a path to the league directory.
.PP
\fIyaml\fR
.IX Subsection "yaml"
.PP
The content of the league configuration file.
.PP
\fIname\fR
.IX Subsection "name"
.PP
The name of the league (class).
.PP
\fImembers\fR
.IX Subsection "members"
.PP
Hash refs of the players (students) in the league. The module assumes each of the members in the arrayref returned by this attribute is a hash ref containing an id and name of the member.
.PP
\fIabsentees\fR
.IX Subsection "absentees"
.PP
Students who have stopped coming to class and so won't be included in classwork scoring.
.PP
\fIis_member\fR
.IX Subsection "is_member"
.PP
Whether the passed id is that of a member in the league (class).
.PP
\fIinspect\fR
.IX Subsection "inspect"
.PP
Loads a \s-1YAML\s0 file.
.PP
\fIsave\fR
.IX Subsection "save"
.PP
Dumps a \s-1YAML\s0 file
.Sh "\s-1GRADES\s0 \s-1CLASS\s0"
.IX Subsection "GRADES CLASS"
.Sh "Grades' Homework Methods"
.IX Subsection "Grades' Homework Methods"
\fIhwdir\fR
.IX Subsection "hwdir"
.PP
The directory where the homework is.
.PP
\fIrounds\fR
.IX Subsection "rounds"
.PP
An arrayref of the files containing the homework grades of players in the league, in round order. The names of the files are '1.yaml', '3,yaml', etc.
.PP
\fIhwbyround\fR
.IX Subsection "hwbyround"
.PP
A hashref of the homework grades for players in the league for each round.
.PP
\fItotalMax\fR
.IX Subsection "totalMax"
.PP
The total maximum points that a Player could have gotten to this point in the whole season. There may be more (or fewer) rounds played than expected, so the actual top possible score returned by totalMax may be more (or less) than the figure planned.
.PP
\fIhwforid\fR
.IX Subsection "hwforid"
.PP
Given a player's id, returns an array ref of the player's hw scores.
.PP
\fIhomework\fR
.IX Subsection "homework"
.PP
Running total homework scores of the league as percentages of the totalMax, with a maximum of 100.
.Sh "Grades' Classwork Methods"
.IX Subsection "Grades' Classwork Methods"
\fIseries\fR
.IX Subsection "series"
.PP
The sessions over the series (semester) in which there was a different grouping (beancans) of players. Everyone in the same beancan for one session gets the same number of beans (classwork score.)
.PP
\fIbeancanseries\fR
.IX Subsection "beancanseries"
.PP
The different beancans for each of the sessions in the series.
.PP
\fIallfiles\fR
.IX Subsection "allfiles"
.PP
The files containing classwork points (beans) awarded to beancans.
.PP
\fIallweeks\fR
.IX Subsection "allweeks"
.PP
The weeks (an array ref of integers) in which beans were awarded.
.PP
\fIlastweek\fR
.IX Subsection "lastweek"
.PP
The last week in which beans were awarded.
.PP
\fIdata\fR
.IX Subsection "data"
.PP
The beans awarded to the beancans over the series (semester.)
.PP
\fIcard\fR
.IX Subsection "card"
.PP
Classwork beans for each beancan for the given week
.PP
\fIbeancans\fR
.IX Subsection "beancans"
.PP
A hashref of all the beancans in a session with the names of the members of each beancan. The number, composition and names of the beancans in each session of the series may change.
.PP
Players in one beancan all get the same classwork grade for that session. The beancan members may be the same as the members of the class group, who work together in class, or may be individuals. Usually in a big class, the beancans will be the same as the groups, and in a small class they will be individuals.
.PP
Rather than refactor the class to work with individuals rather than groups, and expand some methods (?) to fall back to league members if it finds them in the weekly files instead of groups, I decided to introduce another file, beancans.yaml, and change all variable and method names mentioning group to beancan.
.PP
\fIfiles\fR
.IX Subsection "files"
.PP
Given a session, returns the files containing beans for the session.
.PP
\fIweeks\fR
.IX Subsection "weeks"
.PP
Given a session, returns the weeks (an array ref of integers) in which beans were awarded in the session.
.PP
\fIweek2session\fR
.IX Subsection "week2session"
.PP
.Vb 1
\&        $classwork\->week2session(15) # fourth
.Ve
.PP
Given the name of a week, return the name of the session it is in.
.PP
\fInames2beancans\fR
.IX Subsection "names2beancans"
.PP
A hashref of names of members of beancans (players) and the beancans they were members of.
.PP
\fInames2beancans\fR
.IX Subsection "names2beancans"
.PP
Given the name of a player, an arrayref of the beancans they were members of.
.PP
\fIbeancansNotInCard\fR
.IX Subsection "beancansNotInCard"
.PP
.Vb 1
\&        $classwork\->beancansNotInCard( $beancans, $card, 3)
.Ve
.PP
Test all beancans exist in the beancans listed on the card for the week.
.PP
\fIbeancanDataOnCard\fR
.IX Subsection "beancanDataOnCard"
.PP
.Vb 1
\&        $classwork\->beancansNotInCard( $beancans, $card, 3)
.Ve
.PP
Test all of the beancans have all the points due them for the week.
.PP
\fImerits\fR
.IX Subsection "merits"
.PP
The points the beancan gained for the given week.
.PP
\fIabsences\fR
.IX Subsection "absences"
.PP
The number of players absent from the beancan in the given week. These are demerits.
.PP
\fItardies\fR
.IX Subsection "tardies"
.PP
The number of players not on time in the beancan in the given week. These are demerits.
.PP
\fIpayout\fR
.IX Subsection "payout"
.PP
How much should be given out for each beancan for each week in this session, so that the total score of each player over the series averages 80?
.PP
\fIdemerits\fR
.IX Subsection "demerits"
.PP
The demerits that week. calculated as twice the number of absences, plus the number of tardies. In a four-member beancan, this ranges from 0 to 8.
.PP
\fIfavor\fR
.IX Subsection "favor"
.PP
A score of 1 given to beancans with no more than 6 demerits, to prevent beancans who were all there but didn't do anything (ie had no merits and no demerits) from getting a log score of 0, and so getting a grade of 0 for that week.
.PP
\fImaxDemerit\fR
.IX Subsection "maxDemerit"
.PP
The max demerit that week. achieved by the beancan with the most absences and tardies.
.PP
\fImeritDemerit\fR
.IX Subsection "meritDemerit"
.PP
Let beancans with no merits, and no demerits get a score greater than 1, so the log score is greater than 0. Let beancans with 3 or more absences and 1 tardies not be eligible for this favor, but get at least 0. Let other beancans get the number of merits \- number of demerits, but also be eligible for the favor, and get a score of above 1.
.PP
\fIlogwork\fR
.IX Subsection "logwork"
.PP
The points given by the teacher are log-scaled to prevent active students from taking all the payout, and the other students getting very low grades. There may be better ways of grading to the curve than using log scaling. The log of one point is 0, which results in a grade of 0 for that week for that beancan.
.PP
\fIwork2grades\fR
.IX Subsection "work2grades"
.PP
The work (ie merits \- demerits) of the individual beancans for the week, as a percentage of the total work of all the beancans, determines the payout of grades, which should average 80 over the sessions of play.
.PP
\fIgrades4session\fR
.IX Subsection "grades4session"
.PP
Totals for a given beancan over the session.
.PP
\fIclasswork\fR
.IX Subsection "classwork"
.PP
Running totals for individual ids out of 100, over the whole series.
.Sh "Grades' Exams Methods"
.IX Subsection "Grades' Exams Methods"
\fIexamdirs\fR
.IX Subsection "examdirs"
.PP
The directories in which exam results exist.
.PP
\fIexamMax\fR
.IX Subsection "examMax"
.PP
The maximum score possible in each individual exam. That is, what the exam is out of.
.PP
\fIexamResults\fR
.IX Subsection "examResults"
.PP
A hash ref of the ids of the players and arrays of their results over the exam series, ie examdirs, in files named 'g.yaml'. \s-1TODO:\s0 Croak if any result is larger than examMax.
.PP
\fIexamPercent\fR
.IX Subsection "examPercent"
.PP
A hashref of the ids of the players and arrays of their results over the exams expressed as percentages of the maximum possible score for the exams.
.PP
\fIexamGrade\fR
.IX Subsection "examGrade"
.PP
A hash ref of the ids of the players and their total exam score, expressed as a percentage of the possible exam score. This is the average of their exam scores.
.Sh "Grades' Core Methods"
.IX Subsection "Grades' Core Methods"
\fIleague\fR
.IX Subsection "league"
.PP
The league (object) whose grades these are.
.PP
\fIweights\fR
.IX Subsection "weights"
.PP
An array ref of the weights (expressed as a percentage) accorded to the three components, classwork, homework, and exams, in that order, in the final grade. Could be a hash ref (\s-1YAML\s0 mapping) in 'league.yaml.'
.PP
\fIsprintround\fR
.IX Subsection "sprintround"
.PP
sprintf( '%.0f', \f(CW$number\fR). sprintf warns if \f(CW$number\fR is undef.
.PP
\fIgrades\fR
.IX Subsection "grades"
.PP
A hashref of student ids and final grades.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dr Bean, \f(CW\*(C`<drbean, followed by the at mark (@), cpan, then a dot, and finally, org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-grades at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Grades>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Grades
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Grades>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Grades>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Grades>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Grades>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2006 Dr Bean, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
